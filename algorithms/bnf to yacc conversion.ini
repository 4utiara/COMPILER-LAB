EXPERIMENT - 10
BNF TO YACC CONVERSION
AIM
To write a program to convert the BNF rules into YACC form and write code to generate abstract
syntax tree
ALGORITHM
1. 2. 3. 4. 5. 6. 7. 8. 9. The program begins in the main() function, where input is taken from a file (if provided),
and yyparse() is invoked to start parsing.
The parser processes the source code, using a set of grammar rules and a CFG, which
defines program structures like PROGRAM, BLOCK, CODE, STATEMENT, EXPR,
CONDITION, and control structures like IF, ELSE, and WHILE.
The lexical analyzer scans the input code and returns tokens such as NUM, VAR,
RELOP, and control keywords like IF, WHILE, and TYPE to the YACC parser.
During parsing, the program builds quadruples (3-address code) for expressions and
conditions using the function AddQuadruple().
The quadruples are stored in the global array QUAD[], and temporary variables are
generated using tIndex for intermediate expressions.
For assignments and expressions (e.g., addition, subtraction), the AddQuadruple()
function creates the necessary quadruple, updating QUAD[] with the operator, operands,
and result.
Control structures like IF, ELSE, and WHILE involve conditional jumps. These are
handled by pushing and popping indices of quadruples onto the stack and updating their
result fields to indicate where control should jump.
After parsing, the program prints all generated quadruples in a tabular format showing the
operator, arguments, and result for each operation.
The stack functions push() and pop() manage control flow for conditional and loop
statements by handling jump addresses.
10. The program concludes by printing any errors encountered, using yyerror() to indicate the
line number where an error occurred.